"use strict";(self.webpackChunkqava_docs=self.webpackChunkqava_docs||[]).push([[192],{4137:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=a.createContext({}),c=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(i.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),m=c(n),d=r,v=m["".concat(i,".").concat(d)]||m[d]||p[d]||o;return n?a.createElement(v,l(l({ref:t},u),{},{components:n})):a.createElement(v,l({ref:t},u))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=m;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:r,l[1]=s;for(var c=2;c<o;c++)l[c]=n[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3960:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var a=n(7462),r=(n(7294),n(4137));const o={sidebar_position:1},l="Memory",s={unversionedId:"Guides/memory",id:"Guides/memory",title:"Memory",description:"Framework provides the capability to transit variables between step and access them from gherkin definitions",source:"@site/docs/Guides/memory.md",sourceDirName:"Guides",slug:"/Guides/memory",permalink:"/docs/Guides/memory",draft:!1,editUrl:"https://github.com/qavajs/qavajs.github.io/tree/main/docs/Guides/memory.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Guides",permalink:"/docs/category/guides"},next:{title:"Page Object",permalink:"/docs/Guides/page-object"}},i={},c=[{value:"Constants and computed",id:"constants-and-computed",level:2},{value:"String interpolation",id:"string-interpolation",level:2},{value:"$js",id:"js",level:2},{value:"Escape $",id:"escape-",level:2},{value:"Parallel",id:"parallel",level:2}],u={toc:c};function p(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"memory"},"Memory"),(0,r.kt)("p",null,"Framework provides the capability to transit variables between step and access them from gherkin definitions"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-gherkin"},"When I save text of 'Answer' to equal 'answer'\nThen I expect text of 'Another Answer' to equal '$answer'\n")),(0,r.kt)("h1",{id:"custom-steps"},"Custom Steps"),(0,r.kt)("p",null,"Memory value can be set and read from memory object"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const memory = require('@qavajs/memory');\n\nWhen(/^save variable as '(.+)'$/, async function (key) {\n    memory.setValue(key, 42);\n});\n\nThen(/^value '(.+)' should be equal to '(.+)'$/, async function (variable1, variable2) {\n    const val = memory.getValue(variable1);\n    expect(val).to.equal(variable2);\n});\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-gherkin"},"When save variable as 'variable'\n# previously saved variable can be accessed via $identifier\nThen value of '$variable' should be equal to '42'\n")),(0,r.kt)("h2",{id:"constants-and-computed"},"Constants and computed"),(0,r.kt)("p",null,"Lib provides capability to set constant values and computed (JavaScript function references that can be called from feature file)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"module.exports = {\n    constant: 42,\n    computed: function() {\n        return Date.now()\n    }\n};\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-gherkin"},"Then I expect text of 'Answer' to equal '$constant'\nThen I expect text of 'What Time Is It' to equal '$computed()'\n")),(0,r.kt)("h2",{id:"string-interpolation"},"String interpolation"),(0,r.kt)("p",null,"Module also provides capability to use string interpolation in your Gherkin scenarios"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-gherkin"},"When I save '42' to memory as 'variable'\nThen I expect text of 'Answer' to equal 'answer is {$variable}' #expected value will be 'answer is 42'\n")),(0,r.kt)("h2",{id:"js"},"$js"),(0,r.kt)("p",null,"Built-in ",(0,r.kt)("inlineCode",{parentName:"p"},"$js")," computed provides a way to execute JavaScript code."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-gherkin"},"When I expect text of 'Current Date' to equal '$js(Date.now())'\n")),(0,r.kt)("h2",{id:"escape-"},"Escape $"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"$")," can be escaped with double backslash"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-Gherkin"},"When I expect text of 'Currency Label' to equal '\\\\$42'\n")),(0,r.kt)("h2",{id:"parallel"},"Parallel"),(0,r.kt)("p",null,"In case you need to assign uniq value for each Cucumber thread you can use parallel function.\nIt will assign value based on CUCUMBER_WORKER_ID env variable."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const { parallel } = require('@qavajs/memory/utils');\n\nclass Memory {\n    user = parallel([\n        { username: 'user1', password: 'password' },\n        { username: 'user2', password: 'password' }\n    ]);\n}\n\nmodule.exports = Memory;\n")))}p.isMDXComponent=!0}}]);