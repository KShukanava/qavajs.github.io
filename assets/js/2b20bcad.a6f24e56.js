"use strict";(self.webpackChunkqava_docs=self.webpackChunkqava_docs||[]).push([[893],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>f});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=a.createContext({}),c=function(e){var t=a.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=c(r),f=n,d=m["".concat(s,".").concat(f)]||m[f]||u[f]||o;return r?a.createElement(d,i(i({ref:t},p),{},{components:r})):a.createElement(d,i({ref:t},p))}));function f(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,i=new Array(o);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:n,i[1]=l;for(var c=2;c<o;c++)i[c]=r[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}m.displayName="MDXCreateElement"},8693:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var a=r(7462),n=(r(7294),r(3905));const o={sidebar_position:5},i="@qavajs/xray-formatter",l={unversionedId:"Formatters/xray-formatter",id:"Formatters/xray-formatter",title:"@qavajs/xray-formatter",description:"Jira Xray formatter for cucumber framework",source:"@site/docs/Formatters/xray-formatter.md",sourceDirName:"Formatters",slug:"/Formatters/xray-formatter",permalink:"/docs/Formatters/xray-formatter",draft:!1,editUrl:"https://github.com/qavajs/qavajs.github.io/tree/main/docs/Formatters/xray-formatter.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"@qavajs/html-formatter",permalink:"/docs/Formatters/html-formatter"},next:{title:"Guides",permalink:"/docs/category/guides"}},s={},c=[{value:"Installation",id:"installation",level:2},{value:"Config",id:"config",level:2},{value:"How it works?",id:"how-it-works",level:3},{value:"F.A.Q",id:"faq",level:3}],p={toc:c};function u(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,a.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"qavajsxray-formatter"},"@qavajs/xray-formatter"),(0,n.kt)("p",null,"Jira Xray formatter for cucumber framework"),(0,n.kt)("h2",{id:"installation"},"Installation"),(0,n.kt)("p",null,"To install formatter run"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"npm install @qavajs/xray-formatter")),(0,n.kt)("h2",{id:"config"},"Config"),(0,n.kt)("p",null,"Add to format section in config file"),(0,n.kt)("p",null,"cloud configuration:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-javascript"},"export default {\n    format: ['@qavajs/xray-formatter:report/xray.out'],\n    formatOptions: {\n        xray: {\n            client_id: 'client_id', // generated client_id from xray cloud\n            client_secret: 'client_secret', // generated client_id from xray client_secret\n            testExecutionKey: 'ABC-12' // test execution jira key to send result\n        }\n    }\n}\n")),(0,n.kt)("p",null,"server configuration:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-javascript"},"export default {\n    format: ['@qavajs/xray-formatter:report/xray.out'],\n    formatOptions: {\n        xray: {\n            endpoint: 'https://your.jira.instance/jira', //jira api endpoint\n            client_secret: 'client_secret', // personal access key from jira instance\n            testExecutionKey: 'ABC-12' // test execution jira key to send result\n        }\n    }\n}\n")),(0,n.kt)("h3",{id:"how-it-works"},"How it works?"),(0,n.kt)("p",null,"Plugin reads all tags in jira key format (@ABCD-123) and update corresponding scenarios in provided test execution"),(0,n.kt)("h3",{id:"faq"},"F.A.Q"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Does it work with Jira Server?"),(0,n.kt)("p",{parentName:"li"},"Yes")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"What multiple test automated cases mapped to one xray test case?"),(0,n.kt)("p",{parentName:"li"},"Test will get status from last result with corresponding tag")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"What multiple xray cases mapped to one test automation case?"),(0,n.kt)("p",{parentName:"li"},"All mapped test cases will get same status"))))}u.isMDXComponent=!0}}]);